pc_scores_info<-merge(pc_scores, gene_sample_info, by=0)
str(pc_scores_info)
loadings<-gene_pca$rotation
#Extract the loadings for the first PC
loadings<-gene_pca$rotation[,1]
loadings<-abs(loadings)
#sort PCA in the decreasing order
loadings<-sort(loadings,decreasing = T)
loadings
#select 10 top names of the original variables based on the higest weights
top10<-names(loadings[1:10])
gene_pca$rotation[top10, 1]
#Extract the loadings for the second PC
loadings2<-gene_pca$rotation[,2]
loadings2<-abs(loadings2)
loadings2<-sort(loadings2,decreasing = T)
loadings2
top10_2<-names(loadings2[1:10])
gene_pca$rotation[top10_2, 2]
top_genes<-unique(c(top10, top10_2))
pc_loadings <-as.data.frame(gene_pca$rotation[top_genes,1:2])
pc_loadings$gene<-rownames(pc_loadings)
ggplot(pc_loadings) +
geom_segment(aes(x = 0, y = 0, xend = PC1, yend = PC2),
arrow = arrow(length = unit(0.1, "in")),
col = "brown") +
geom_text(aes(x = PC1, y = PC2, label = gene),
nudge_y = 0.005, size = 3) +
scale_x_continuous(expand = c(0.02, 0.02))
library(factoextra)
library(factoextra)
install.packages("factoextra")
library(factoextra)
fviz_pca_var(gene_pca, col.var = "red", select.var = list(name=top_genes))
km<-kmeans(gene_expr, 6, nstart=25)
head(pc_scores)
clusters<-data.frame(Cluster=km$cluster)
cluster_scores<-merge(pc_scores, clusters, by="row.names")
rownames(cluster_scores)<-cluster_scores$Row.names
names(cluster_scores)
ggplot(cluster_scores, aes(x = PC1,y = PC2, col = Cluster,)) +
geom_point()+
geom_text(aes(x = PC1, y = PC2, label = rownames(cluster_scores)),
nudge_y = 1, size = 2)+
scale_color_gradient(low="blue", high="red")
owid.covid.data <- read.csv("C:/Users/user/Desktop/R-Programming/Applied-ML/Week4/owid-covid-data.csv", header=FALSE)
View(owid.covid.data)
covid_expr <- read.csv("owid.covid.data", row.names = 1)
covid_expr <- read.csv("owid.covid.data", row.names = 1)
covid_expr <- read.csv("owid.covid.data.csv", row.names = 1)
covid_expr <- read.csv("owid.covid.data", row.names = 1)
View(owid.covid.data)
View(owid.covid.data)
covid_expr <- read.csv("owid.covid.data", row.names = 1)
covidData <- read.csv("C:/Users/user/Desktop/R-Programming/Applied-ML/Week4/covidData.csv", header=FALSE)
View(covidData)
covid_expr <- read.csv("covidData", row.names = 1)
head(covidData)
dim(covidData)
covid_expr <- read.csv("covidData.csv", row.names = 1)
covid_expr <- read.csv("covidData.csv", row.names = NULL)
head(covid_expr)
dim(covid_expr)
dim(covidData)
covid_expr<-t(covid_expr)
dim(covid_expr)
gene_pca <- prcomp(as.matrix(gene_expr))
covid_pca <- prcomp(as.matrix(covid_expr))
covid_pca <- prcomp(as.matrix(covid_expr))
covid_expr_new <- covid_expr[ , unlist(lapply(covid_expr, is.numeric))]
gamergate_tweets <- read.csv("C:/Users/user/Desktop/R-Programming/Applied-ML/Week4/gamergate_tweets.csv")
View(gamergate_tweets)
fake_job_postings <- read.csv("C:/Users/user/Desktop/R-Programming/Applied-ML/Week4/fake_job_postings.csv")
View(fake_job_postings)
# Install and load necessary packages
install.packages("tidyverse")
library(tidyverse)
# Load the dataset
fake_jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Check the structure of the dataset
str(fake_jobs)
# Filter out the relevant columns
fake_salary <- fake_jobs %>%
select(fraudulent, salary_range)
# Check unique values of salary_range
unique(fake_salary$salary_range)
# Data preprocessing: Convert salary_range to numeric
fake_salary <- fake_salary %>%
mutate(salary_range = gsub("[^0-9]", "", salary_range)) %>%
separate(salary_range, into = c("min_salary", "max_salary"), sep = "-") %>%
mutate(min_salary = as.numeric(min_salary),
max_salary = as.numeric(max_salary))
# Check the structure of the modified dataset
str(fake_salary)
# Plot the relationship between fraudulent and salary_range
ggplot(fake_salary, aes(x = fraudulent, y = (min_salary + max_salary) / 2, fill = fraudulent)) +
geom_boxplot() +
labs(x = "Fraudulent", y = "Average Salary", title = "Fraudulent vs Salary Range") +
scale_fill_discrete(name = "Fraudulent")
# Install and load necessary packages
install.packages("tidyverse")
library(tidyverse)
# Load the dataset
fake_jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out the relevant columns
fake_salary <- fake_jobs %>%
select(fraudulent, salary_range)
# Data preprocessing: Convert salary_range to numeric
fake_salary <- fake_salary %>%
mutate(salary_range = gsub("[^0-9]", "", salary_range)) %>%
separate(salary_range, into = c("min_salary", "max_salary"), sep = "-") %>%
mutate(min_salary = as.numeric(min_salary),
max_salary = as.numeric(max_salary))
# Filter out rows with missing values
fake_salary <- fake_salary %>%
filter(!is.na(min_salary) & !is.na(max_salary))
# Plot the relationship between fraudulent and salary_range
ggplot(fake_salary, aes(x = fraudulent, y = (min_salary + max_salary) / 2, fill = fraudulent)) +
geom_boxplot() +
labs(x = "Fraudulent", y = "Average Salary", title = "Fraudulent vs Salary Range") +
scale_fill_discrete(name = "Fraudulent")
# Install and load necessary packages
install.packages("tidyverse")
library(tidyverse)
# Load the dataset
fake_jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out the relevant columns
fake_salary <- fake_jobs %>%
select(fraudulent, salary_range)
# Data preprocessing: Convert salary_range to numeric
fake_salary <- fake_salary %>%
mutate(salary_range = gsub("[^0-9]", "", salary_range)) %>%
separate(salary_range, into = c("min_salary", "max_salary"), sep = "-") %>%
mutate(min_salary = as.numeric(min_salary),
max_salary = as.numeric(max_salary))
# Filter out rows with missing values
fake_salary <- fake_salary %>%
filter(!is.na(min_salary) & !is.na(max_salary))
# Plot the relationship between fraudulent and salary_range
ggplot(fake_salary, aes(x = fraudulent, y = (min_salary + max_salary) / 2, fill = fraudulent)) +
geom_boxplot() +
labs(x = "Fraudulent", y = "Average Salary", title = "Fraudulent vs Salary Range") +
scale_fill_discrete(name = "Fraudulent")
View(fake_jobs)
View(fake_jobs)
View(fake_salary)
View(fake_salary)
# Filter out the relevant columns
fake_salary <- fake_jobs %>%
select(fraudulent, salary_range)
# Filter out the relevant columns
fake_salary <- fake_jobs %>%
select(fraudulent == 1, salary_range)
# Filter out the relevant columns
fake_salary <- fake_jobs[fake_jobs$fraudulent == 1, c("fraudulent", "salary_range")]
View(fake_salary)
View(fake_salary)
# Data preprocessing: Convert salary_range to numeric
dim(fake_salary)
# Data preprocessing: Convert salary_range to numeric
head(fake_salary)
# Data preprocessing: Convert salary_range to numeric
summary(fake_salary)
str(pc_scores_info)
# Data preprocessing: Convert salary_range to numeric
str(fake_salary)
# Example data frame with salary_range column
fake_salary <- data.frame(salary_range = c("10000 - 20000", "30000 - 40000", "25000 - 35000"))
# Split salary_range into two separate columns
fake_salary <- separate(fake_salary, salary_range, into = c("min_salary", "max_salary"), sep = " - ")
# Convert min_salary and max_salary to numeric
fake_salary$min_salary <- as.numeric(fake_salary$min_salary)
fake_salary$max_salary <- as.numeric(fake_salary$max_salary)
# Display the modified data frame
print(fake_salary)
# Install and load necessary packages
install.packages("tidyverse")
library(tidyverse)
# Load the dataset
fake_jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out the relevant columns where fraudulent is 1
fake_salary <- fake_jobs %>%
filter(fraudulent == 1) %>%
select(fraudulent, salary_range)
# Data preprocessing: Convert salary_range to numeric
fake_salary <- fake_salary %>%
separate(salary_range, into = c("min_salary", "max_salary"), sep = " - ") %>%
mutate(min_salary = as.numeric(min_salary),
max_salary = as.numeric(max_salary))
# Display the modified data frame
print(fake_salary)
install.packages("tidyverse")
# Install and load necessary packages
install.packages("tidyverse")
library(tidyverse)
# Load the dataset
fake_jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out rows where salary_range is not null
fake_jobs <- fake_jobs %>%
filter(!is.na(salary_range))
# Filter out the relevant columns where fraudulent is 1
fake_salary <- fake_jobs %>%
filter(fraudulent == 1) %>%
select(fraudulent, salary_range)
# Data preprocessing: Convert salary_range to numeric
fake_salary <- fake_salary %>%
separate(salary_range, into = c("min_salary", "max_salary"), sep = " - ") %>%
mutate(min_salary = as.numeric(min_salary),
max_salary = as.numeric(max_salary))
# Display the modified data frame
print(fake_salary)
install.packages("tidyverse")
# Install and load necessary packages
library(tidyverse)
# Load the dataset
fake_jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out rows where salary_range is not null
fake_jobs <- fake_jobs %>%
filter(!is.na(salary_range))
# Filter out the relevant columns where fraudulent is 1
fake_salary <- fake_jobs %>%
filter(fraudulent == 1) %>%
select(fraudulent, salary_range)
# Data preprocessing: Convert salary_range to numeric
fake_salary <- fake_salary %>%
separate(salary_range, into = c("min_salary", "max_salary"), sep = " - ") %>%
mutate(min_salary = as.numeric(min_salary),
max_salary = as.numeric(max_salary))
# Display the modified data frame
print(fake_salary)
# Install and load necessary packages
library(tidyverse)
# Load the dataset
fake_jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out rows where salary_range is not null
fake_jobs <- fake_jobs %>%
filter(!is.na(salary_range))
# Filter out the relevant columns where fraudulent is 1
fake_salary <- fake_jobs %>%
filter(fraudulent == 1) %>%
select(fraudulent, salary_range)
# Install and load necessary packages
library(tidyverse)
# Load the dataset
fake_jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out the relevant columns where fraudulent is 1
fake_salary <- fake_jobs %>%
filter(fraudulent == 1) %>%
select(fraudulent, salary_range)
# Filter out rows where salary_range is not null
fake_jobs <- fake_jobs %>%
filter(!is.na(salary_range))
# Install and load necessary packages
library(tidyverse)
# Load the dataset
fake_jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out the relevant columns where fraudulent is 1
fake_salary <- fake_jobs %>%
filter(fraudulent == 1) %>%
select(title,fraudulent, salary_range)
# Filter out rows where salary_range is not null
fake_jobs <- fake_jobs %>%
filter(!is.na(salary_range))
fake_salary <- fake_jobs %>%
filter(fraudulent == 1) %>%
filter(!is.na(salary_range)) %>%
select(title,fraudulent, salary_range)
fake_salary <- fake_jobs %>%
filter(fraudulent == 1) %>%
filter(trimws(salary_range) != "") %>%
select(title, fraudulent, salary_range)
# Install and load necessary packages
library(tidyverse)
# Load the dataset
fake_jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out the relevant columns where fraudulent is 1
fake_salary <- fake_jobs %>%
filter(fraudulent == 1) %>%
filter(trimws(salary_range) != "") %>%
select(title, fraudulent, salary_range)
View(fake_salary)
# Install and load necessary packages
library(tidyverse)
# Load the dataset
jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out the relevant columns where fraudulent is 1
fake_salary <- jobs %>%
filter(fraudulent == 1) %>%
filter(trimws(salary_range) != "") %>%
select(title, fraudulent, salary_range)
View(fake_jobs)
View(fake_jobs)
View(jobs)
# Install and load necessary packages
library(tidyverse)
# Load the dataset
jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out the relevant columns where fraudulent is 1
fake_salary <- jobs %>%
filter(fraudulent == 1) %>%
filter(trimws(salary_range) != "") %>%
select(title, fraudulent, salary_range)
real_salary <-
View(jobs)
View(fake_salary)
real_salary <- jobs %>%
filter(fraudulent == 0) %>%
filter(trimws(salary_range) != "") %>%
select(title, fraudulent, salary_range)
View(real_salary)
ggplot(filtered_jobs, aes(x = title, y = salary_range, color = factor(fraudulent))) +
geom_point() +
labs(title = "Salary vs. Job Title",
x = "Job Title",
y = "Salary Range",
color = "Fraudulent") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
scale_color_manual(values = c("blue", "red"))  # Specify colors for fraudulent and real job postings
# Install and load necessary packages
library(tidyverse)
# Load the dataset
jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out relevant columns and rows
filtered_jobs <- jobs %>%
filter(trimws(salary_range) != "") %>%
select(title, fraudulent, salary_range)
# Extract numeric salary values
filtered_jobs$salary_range <- gsub("[^0-9.-]", "", filtered_jobs$salary_range)
filtered_jobs$salary_range <- as.character(filtered_jobs$salary_range)
filtered_jobs$salary_range <- as.numeric(unlist(strsplit(filtered_jobs$salary_range, "-")))
filtered_jobs <- jobs %>%
filter(trimws(salary_range) != "") %>%
select(title, fraudulent, salary_range)
View(filtered_jobs)
filtered_jobs$salary_range <- gsub("[^0-9.-]", "", filtered_jobs$salary_range)
filtered_jobs$salary_range <- as.character(filtered_jobs$salary_range)
filtered_jobs$salary_range <- as.numeric(unlist(strsplit(filtered_jobs$salary_range, "-")))
# Install and load necessary packages
library(tidyverse)
# Load the dataset
jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out relevant columns and rows
filtered_jobs <- jobs %>%
filter(trimws(salary_range) != "") %>%
select(title, fraudulent, salary_range)
# Extract numeric salary values
salary_values <- unlist(strsplit(gsub("[^0-9.-]", "", filtered_jobs$salary_range), "-"))
filtered_jobs$salary_range <- as.numeric(salary_values[seq(1, length(salary_values), by = 2)])
# Install and load necessary packages
library(tidyverse)
# Load the dataset
jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out relevant columns and rows
filtered_jobs <- jobs %>%
filter(trimws(salary_range) != "") %>%
select(title, fraudulent, salary_range)
# Extract numeric salary values
salary_values <- str_extract_all(filtered_jobs$salary_range, "\\d+") %>%
map_dbl(~ mean(as.numeric(.)))
# Update salary_range column with extracted numeric values
filtered_jobs$salary_range <- salary_values
# Plotting
ggplot(filtered_jobs, aes(x = title, y = salary_range, color = factor(fraudulent))) +
geom_point() +
labs(title = "Salary vs. Job Title",
x = "Job Title",
y = "Salary Range",
color = "Fraudulent") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
scale_color_manual(values = c("blue", "red"))  # Specify colors for fraudulent and real job postings
# Install and load necessary packages
library(tidyverse)
# Load the dataset
jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out relevant columns and rows
filtered_jobs <- jobs %>%
filter(trimws(salary_range) != "") %>%
select(title, fraudulent, salary_range)
# Extract numeric salary values
salary_values <- str_extract_all(filtered_jobs$salary_range, "\\d+") %>%
map_dbl(~ mean(as.numeric(.)))
# Update salary_range column with extracted numeric values
filtered_jobs$salary_range <- salary_values
# Plotting
ggplot(filtered_jobs, aes(x = reorder(title, -salary_range), y = salary_range, color = factor(fraudulent))) +
geom_point(size = 2, alpha = 0.6) +
labs(title = "Salary vs. Job Title",
x = "Job Title",
y = "Average Salary",
color = "Fraudulent") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_manual(values = c("blue", "red")) +  # Specify colors for fraudulent and real job postings
guides(color = guide_legend(title = "Fraudulent")) +
coord_flip()
# Plotting
ggplot(filtered_jobs, aes(x = fraudulent, y = salary_min, color = fraudulent)) +
geom_boxplot() +
labs(title = "Comparison of Fraudulent and Non-Fraudulent Salaries",
x = "Fraudulent",
y = "Salary (Min)",
color = "Fraudulent") +
scale_color_manual(values = c("blue", "red")) +
theme_minimal()
# Load necessary packages
library(tidyverse)
# Load the dataset
jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out relevant columns and rows
filtered_jobs <- jobs %>%
filter(trimws(salary_range) != "") %>%
mutate(salary_range = gsub("[^0-9.-]", "", salary_range)) %>%
separate(salary_range, into = c("salary_min", "salary_max"), sep = "-") %>%
mutate(across(c(salary_min, salary_max), as.numeric)) %>%
select(fraudulent, salary_min)
# Plotting
ggplot(filtered_jobs, aes(x = factor(fraudulent), y = salary_min, fill = factor(fraudulent))) +
geom_boxplot() +
labs(title = "Comparison of Fraudulent and Non-Fraudulent Salaries",
x = "Fraudulent",
y = "Minimum Salary",
fill = "Fraudulent") +
scale_fill_manual(values = c("blue", "red"), labels = c("Non-Fraudulent", "Fraudulent")) +
theme_minimal()
View(filtered_jobs)
# Load necessary packages
library(tidyverse)
# Load the dataset
jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out relevant columns and rows
filtered_jobs <- jobs %>%
filter(trimws(salary_range) != "") %>%
mutate(salary_range = gsub("[^0-9.-]", "", salary_range)) %>%
separate(salary_range, into = c("salary_min", "salary_max"), sep = "-") %>%
mutate(across(c(salary_min, salary_max), as.numeric)) %>%
filter(salary_min >= 20000) %>%  # Filter out salaries under $20,000
select(fraudulent, salary_min)
# Plotting
ggplot(filtered_jobs, aes(x = factor(fraudulent), y = salary_min, fill = factor(fraudulent))) +
geom_boxplot() +
labs(title = "Comparison of Fraudulent and Non-Fraudulent Salaries",
x = "Fraudulent",
y = "Minimum Salary",
fill = "Fraudulent") +
scale_fill_manual(values = c("blue", "red"), labels = c("Non-Fraudulent", "Fraudulent")) +
theme_minimal()
# Load necessary packages
library(tidyverse)
# Load the dataset
jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out relevant columns and rows
filtered_jobs <- jobs %>%
filter(trimws(salary_range) != "") %>%
mutate(salary_range = gsub("[^0-9.-]", "", salary_range)) %>%
separate(salary_range, into = c("salary_min", "salary_max"), sep = "-") %>%
mutate(across(c(salary_min, salary_max), as.numeric)) %>%
filter(salary_min >= 20000 && salary_min <= 100000) %>%  # Filter out salaries under $20,000
select(fraudulent, salary_min)
# Filter out relevant columns and rows
filtered_jobs <- jobs %>%
filter(trimws(salary_range) != "") %>%
mutate(salary_range = gsub("[^0-9.-]", "", salary_range)) %>%
separate(salary_range, into = c("salary_min", "salary_max"), sep = "-") %>%
mutate(across(c(salary_min, salary_max), as.numeric)) %>%
filter(salary_min >= 20000) %>%
filter(salary_min <= 100000) %>%
select(fraudulent, salary_min)
# Load necessary packages
library(tidyverse)
# Load the dataset
jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out relevant columns and rows
filtered_jobs <- jobs %>%
filter(trimws(salary_range) != "") %>%
mutate(salary_range = gsub("[^0-9.-]", "", salary_range)) %>%
separate(salary_range, into = c("salary_min", "salary_max"), sep = "-") %>%
mutate(across(c(salary_min, salary_max), as.numeric)) %>%
filter(salary_min >= 20000) %>%
filter(salary_min <= 100000) %>%
select(fraudulent, salary_min)
# Plotting
ggplot(filtered_jobs, aes(x = factor(fraudulent), y = salary_min, fill = factor(fraudulent))) +
geom_boxplot() +
labs(title = "Comparison of Fraudulent and Non-Fraudulent Salaries",
x = "Fraudulent",
y = "Minimum Salary",
fill = "Fraudulent") +
scale_fill_manual(values = c("blue", "red"), labels = c("Non-Fraudulent", "Fraudulent")) +
theme_minimal()
# Load necessary packages
library(tidyverse)
# Load the dataset
jobs <- read.csv("fake_job_postings.csv", stringsAsFactors = FALSE)
# Filter out relevant columns and rows
filtered_jobs <- jobs %>%
filter(trimws(salary_range) != "") %>%
mutate(salary_range = gsub("[^0-9.-]", "", salary_range)) %>%
separate(salary_range, into = c("salary_min", "salary_max"), sep = "-") %>%
mutate(across(c(salary_min, salary_max), as.numeric)) %>%
filter(salary_min >= 20000) %>%
filter(salary_min <= 100000) %>%
select(fraudulent, salary_min)
# Plotting
ggplot(filtered_jobs, aes(x = factor(fraudulent), y = salary_min, fill = factor(fraudulent))) +
geom_boxplot() +
labs(title = "Comparison of Fraudulent and Non-Fraudulent Salaries",
x = "Fraudulent",
y = "Minimum Salary",
fill = "Fraudulent") +
scale_fill_manual(values = c("blue", "red"), labels = c("Non-Fraudulent", "Fraudulent")) +
theme_minimal()
scale_y_continuous(labels = scales::comma)
