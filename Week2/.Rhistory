weight<- c(5.5,7.2, 7.9,8.5,9.1, 9.7,10.2,10.7,11.2, 11.7, 12.2)
#Measures of central tendency
#Mean
mean(weight)
#Median
median(weight)
#Mode
sort(table(weight), decreasing=T)[1]
#Measure of Variation
var(weight)
#standard deviation
sd(weight)
#Quartile
quantile(weight)
#The default for the quantile() function returns the min, 25th percentile, median or
#50th percentile, #75th percentile, and max, known as the five-number summary.
#Other probabilities however can be used e.g. The values for probability can be
#any number from range 0-1.
quantile(weight, c(0.05,0.5, 0.95))
#Range
diff(range(weight))
#IQR
mean(weight)
IQR(weight)
#Frequency - round the values first
weight_r<-round(weight)
table(weight_r)
#Run the code and observe what the output is produced:
#Summary of iris dataset
names(iris)
str(iris)
summary(iris)
data.
describe(iris)
library(psych)
describe(iris)
?write.csv
write.csv(income, file="income.csv")
write.csv(x, file="income.csv")
write.csv(x, file="income.csv")
write.csv(income, file="income.csv")
library(readr)
income_ <- read_csv("income .csv")
View(income_)
describe(income_)
?ggplot
??ggplot
help(ggplot)
library(ggplot2)
ggplot(data = iris)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width))
p<- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width))
p+geom_point()
ggplot(iris,aes(Sepal.Length, Sepal.Width)) + geom_point() + facet_wrap(-Species)
ggplot(iris,aes(Sepal.Length, Sepal.Width)) + geom_point() + facet_wrap(Â¬Species)
ggplot(iris,aes(Sepal.Length, Sepal.Width)) + geom_point() + facet_wrap(~Species)
ggplot(iris,aes(Sepal.Length, Sepal.Width)) + geom_point() + facet_wrap(~Species) + stat_smooth(method="lm", se=FALSE)
ggplot(iris,aes(Sepal.Length, Sepal.Width)) + geom_point() + facet_wrap(~Species) + stat_smooth(method="lm", se=TRUE)
ggplot(iris,aes(Sepal.Length, Sepal.Width)) + geom_point() + facet_wrap(~Species) + stat_smooth(method="lm", se=FALSE)
ggplot(iris,aes(Sepal.Length, Sepal.Width)) + geom_point() + facet_wrap(~Species) + stat_smooth(method="lm", se=TRUE)
ggplot(iris,aes(Sepal.Length, Sepal.Width)) + geom_point() + facet_wrap(~Species) + stat_smooth(method="lm", se=FALSE)
ggplot(iris,aes(Sepal.Length, Sepal.Width)) + geom_point() + facet_wrap(~Species) + stat_smooth(method="lm", se=FALSE) + coord_cartesian(xlim = c(4,8), ylim = c(2, 5))
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
coord_cartesian(xlim = c(4,8), ylim = c(2, 5))
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
coord_cartesian(xlim = c(4,8), ylim = c(2, 5))
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
coord_cartesian(xlim = c(4,9), ylim = c(2, 5))
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
coord_cartesian(xlim = c(4,9), ylim = c(2, 5))
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
coord_cartesian(xlim = c(4,8), ylim = c(2, 5))
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
coord_cartesian(xlim = c(4,8), ylim = c(2, 5))+
theme(axis.text = element_text(color = "red", size=14))
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
coord_cartesian(xlim = c(4,6), ylim = c(2, 5))+
theme(axis.text = element_text(color = "red", size=14))
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
coord_cartesian(xlim = c(4.25,6), ylim = c(2, 5))+
theme(axis.text = element_text(color = "red", size=14))
ggplot(iris,aes(Sepal.Length, Sepal.Width))+
geom_point()+
facet_wrap(~Species) +
stat_smooth(method="lm", se=FALSE) +
coord_cartesian(xlim = c(4,8), ylim = c(2, 5))+
theme(axis.text = element_text(color = "red", size=14))
describe(income_)
set.seed(0)
data<-c(rnorm(90), rep(100,3))
data<-c(rnorm(90), rep(1000,3))
#see which elements are outliers
data[outliers]
z_scores<-(data-mean(data))/sd(data)
outliers<-which(z_scores<(-3) | z_scores>3)
data[outliers]
#remove outliers from data. Use ! operator to remove references specified by vector outliers
no_outliers_data <-data[!outliers]
data<-c( rnorm(90), rep(1000,3))
Q1 <- quantile(data, .25)
Q3 <- quantile(data, .75)
iqr<- IQR(data)
lower_whisher <- (Q1 - 1.5*iqr)
upper_wisher <- (Q3 + 1.5*iqr)
outliers<-which(data<lower_whisher | data>upper_wisher)
data[outliers]
no_outliers_data <-data[!outliers]
data<-c( rnorm(90), rep(1000,11))
#calculate first quartile
Q1 <- quantile(data, .25)
#print outliers
data[outliers]
# Set a threshold for identifying outliers (e.g., z-score > 2 or z-score > 3)
threshold <- 2
# Load your dataset
# For example, if your dataset is a CSV file named "data.csv", you can load it using:
data <- read.csv("income.csv")
library(readr)
income_ <- read_csv("income .csv")
View(income_)
# Load your dataset
# For example, if your dataset is a CSV file named "data.csv", you can load it using:
data <- read.csv("income.csv")
# Load your dataset
# For example, if your dataset is a CSV file named "data.csv", you can load it using:
data <- read.csv("income.csv")
# Calculate the z-scores for the column 'Values'
data$z_scores <- scale(data$capital.gain)
# Set a threshold for identifying outliers (e.g., z-score > 2 or z-score > 3)
threshold <- 2
# Identify outliers based on the threshold
outliers <- data[abs(data$z_scores) > threshold, ]
# Print the outliers
print(outliers)
# Load your dataset
# For example, if your dataset is a CSV file named "data.csv", you can load it using:
data <- read.csv("income.csv")
# Calculate the z-scores for the column 'Values'
data$z_scores <- scale(data$capital.gain)
# Set a threshold for identifying outliers (e.g., z-score > 2 or z-score > 3)
threshold <- 3
# Identify outliers based on the threshold
outliers <- data[abs(data$z_scores) > threshold, ]
# Print the outliers
print(outliers)
# Set a threshold for identifying outliers (e.g., z-score > 2 or z-score > 3)
threshold <- 2
# Load your dataset
# For example, if your dataset is a CSV file named "data.csv", you can load it using:
data <- read.csv("income.csv")
# Calculate the z-scores for the column 'Values'
data$z_scores <- scale(data$capital.gain)
# Set a threshold for identifying outliers (e.g., z-score > 2 or z-score > 3)
threshold <- 2
# Identify outliers based on the threshold
outliers <- data[abs(data$z_scores) > threshold, ]
# Print the outliers
print(outliers)
# Print the outliers
print("======================================")
# Load your dataset
# For example, if your dataset is a CSV file named "data.csv", you can load it using:
data <- read.csv("income.csv")
# Calculate the z-scores for the column 'Values'
data$z_scores <- scale(data$capital.gain)
# Set a threshold for identifying outliers (e.g., z-score > 2 or z-score > 3)
threshold <- 2
# Identify outliers based on the threshold
outliers <- data[abs(data$z_scores) > threshold, ]
# Print the outliers
print("======================================")
print(outliers)
ggplot(data1 = read.csv("income.csv"))
ggplot(data1, aes(x=sex, y=income.label))
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data1 = read.csv("income.csv"))
ggplot(data1, aes(x=sex, y=income.label))
ggplot(income.csv, aes(x=sex, y=income.label))
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label))
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data1 = read.csv("income.csv"))
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar()
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data1 = read.csv("income.csv"))
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar(stat= x)
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar(stat= sex)
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar(stat= male)
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data1 = read.csv("income.csv"))
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar(stat= male)
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data1 = read.csv("income.csv"))
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar(stat= "identity")
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar(stat= "count")
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data1 = read.csv("income.csv"))
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar(stat= "count")
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data1 = read.csv("income.csv"))
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar(stat= "identity")
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data1 = read.csv("income.csv"))
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_col()
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data1 = read.csv("income.csv"))
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar()
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar(position = "stack")
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data1 = read.csv("income.csv"))
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar(position = "stack")
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data1 = read.csv("income.csv"))
ggplot(read.csv("income.csv"), aes(x=sex, y=income.label)) +
geom_bar(stat= "identity", position = "stack")
ggplot(data, aes(x = sex, fill = income_label)) +
geom_bar(position = "dodge") +
labs(x = "Sex", y = "Count", fill = "Income Label", title = "Distribution of Income Label by Sex") +
theme_minimal()
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data, aes(x = sex, fill = income.label)) +
geom_bar(position = "dodge") +
labs(x = "Sex", y = "Count", fill = "Income Label", title = "Distribution of Income Label by Sex") +
theme_minimal()
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data, aes(x = education, fill = income.label)) +
geom_bar(position = "dodge") +
labs(x = "Sex", y = "Count", fill = "Income Label", title = "Distribution of Income Label by Sex") +
theme_minimal()
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data, aes(x = income.label, fill = education)) +
geom_bar(position = "dodge") +
labs(x = "Sex", y = "Count", fill = "Income Label", title = "Distribution of Income Label by Sex") +
theme_minimal()
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data, aes(x = income.label, fill = education)) +
geom_bar(position = "dodge") +
labs(x = "income", y = "Count", fill = "Income Label", title = "Distribution of Income Label by Sex") +
theme_minimal()
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data, aes(x = income.label, fill = education)) +
geom_bar(position = "dodge") +
labs(x = "Income Label", y = "Count", fill = "Education", title = "Distribution of income label by education") +
theme_minimal()
# Print the cleaned dataset
print(data_clean)
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data, aes(x = income.label, fill = education)) +
geom_bar(position = "dodge") +
labs(x = "Income Label", y = "Count", fill = "Education", title = "Distribution of income label by education") +
theme_minimal()
#~~~~~~~~~~~~TaskD~~~~~~~~~~~~
# Load your dataset
# For example, if your dataset is a CSV file named "data.csv", you can load it using:
data <- read.csv("income.csv")
# Calculate the z-scores for the column 'Values'
data$z_scores <- scale(data$capital.gain)
# Set a threshold for identifying outliers (e.g., z-score > 2 or z-score > 3)
threshold <- 2
# Identify outliers based on the threshold
outliers <- data[abs(data$z_scores) > threshold, ]
# Remove outliers from the dataset
data_clean <- data[abs(data$z_scores) <= threshold, ]
# Print the cleaned dataset
print(data_clean)
View(data_clean)
#~~~~~~~~~~~Task E~~~~~~~~~~~~~
str(data)
#~~~~~~~~~~~Task F~~~~~~~~~~~~~
summary(data)
clearPushBack()
clear
summary(data)
str(data)
ggplot(data_clean, aes(relationship, income.label))
ggplot(data, aes(x = age, fill = income)) +
geom_histogram(binwidth = 5, position = "dodge") +
labs(x = "Age", y = "Frequency", fill = "Income") +
ggtitle("Age Distribution by Income Level")
ggplot(data, aes(x = age, fill = income.label)) +
geom_histogram(binwidth = 5, position = "dodge") +
labs(x = "Age", y = "Frequency", fill = "Income") +
ggtitle("Age Distribution by Income Level")
# Plotting education level and income
ggplot(data, aes(x = education, fill = income.label)) +
geom_bar(position = "fill") +
labs(x = "Education Level", y = "Proportion", fill = "Income") +
ggtitle("Proportion of Income Level by Education")
ggplot(data, aes(x = workclass, fill = income)) +
geom_bar(position = "stack") +
labs(x = "Workclass", y = "Count", fill = "Income") +
ggtitle("Distribution of Income by Workclass")
# Plotting workclass distribution
ggplot(data, aes(x = workclass, fill = income.label)) +
geom_bar(position = "stack") +
labs(x = "Workclass", y = "Count", fill = "Income") +
ggtitle("Distribution of Income by Workclass")
# Plotting hours worked per week and income level
ggplot(data, aes(x = hours.per.week, fill = income.label)) +
geom_density(alpha = 0.5) +
labs(x = "Hours per Week", y = "Density", fill = "Income") +
ggtitle("Density Plot of Hours Worked per Week by Income Level")
ggplot(data, aes(x = working.hours, fill = income.label)) +
geom_density(alpha = 0.5) +
labs(x = "Hours per Week", y = "Density", fill = "Income") +
ggtitle("Density Plot of Hours Worked per Week by Income Level")
# Plotting hours worked per week and income level
ggplot(data, aes(x = working.hours, fill = income.label)) +
geom_boxplot() +
labs(x = "Hours per Week", y = "Density", fill = "Income") +
ggtitle("Density Plot of Hours Worked per Week by Income Level")
ggplot(data, aes(x = income, y = hours.per.week, fill = income)) +
geom_boxplot() +
labs(x = "Income Level", y = "Hours per Week", fill = "Income") +
ggtitle("Box Plot of Hours Worked per Week by Income Level")
ggplot(data, aes(x = income, y= working.hours, fill = income.label)) +
geom_boxplot() +
labs(x = "Income Level", y = "Hours per Week", fill = "Income") +
ggtitle("Box Plot of Hours Worked per Week by Income Level")
ggplot(data, aes(x = income.label, y= working.hours, fill = income.label)) +
geom_boxplot() +
labs(x = "Income Level", y = "Hours per Week", fill = "Income") +
ggtitle("Box Plot of Hours Worked per Week by Income Level")
ggplot(data, aes(x = hours.per.week, fill = income)) +
geom_density(alpha = 0.5) +
labs(x = "Hours per Week", y = "Density", fill = "Income") +
ggtitle("Density Plot of Hours Worked per Week by Income Level")
# Plotting hours worked per week and income level
ggplot(data, aes(x = working.hours, fill = income.label)) +
geom_density(alpha = 0.5) +
labs(x = "Hours per Week", y = "Density", fill = "Income") +
ggtitle("Density Plot of Hours Worked per Week by Income Level")
ggplot(data, aes(x = workclass, fill = income.label)) +
geom_bar(position = "stack") +
labs(x = "Workclass", y = "Count", fill = "Income") +
ggtitle("Distribution of Income by Workclass")
ggplot(data, aes(x = age, fill = income.label)) +
geom_histogram(binwidth = 5, position = "dodge") +
labs(x = "Age", y = "Frequency", fill = "Income") +
ggtitle("Age Distribution by Income Level")
ggplot(data, aes(x = age, fill = income.label)) +
geom_histogram(binwidth = 5, position = "dodge") +
labs(x = "Age", y = "Frequency", fill = "Income") +
ggtitle("Age Distribution by Income Level")
# Plotting workclass distribution
ggplot(data, aes(x = workclass, fill = income.label)) +
geom_bar(position = "stack") +
labs(x = "Workclass", y = "Count", fill = "Income") +
ggtitle("Distribution of Income by Workclass")
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data, aes(x = income.label, fill = education)) +
geom_bar(position = "dodge") +
labs(x = "Income Label", y = "Count", fill = "Education", title = "Distribution of income label by education") +
theme_minimal()
library(ggplot2)
#~~~~~~~~~~~Task C~~~~~~~~~~~~
ggplot(data, aes(x = income.label, fill = education)) +
geom_bar(position = "dodge") +
labs(x = "Income Label", y = "Count", fill = "Education", title = "Distribution of income label by education") +
theme_minimal()
#~~~~~~~~~~~~TaskD~~~~~~~~~~~~
# Load your dataset
# For example, if your dataset is a CSV file named "data.csv", you can load it using:
data <- read.csv("income.csv")
# Calculate the z-scores for the column 'Values'
data$z_scores <- scale(data$capital.gain)
# Set a threshold for identifying outliers (e.g., z-score > 2 or z-score > 3)
threshold <- 2
# Identify outliers based on the threshold
outliers <- data[abs(data$z_scores) > threshold, ]
# Remove outliers from the dataset
data_clean <- data[abs(data$z_scores) <= threshold, ]
# Print the cleaned dataset
print(data_clean)
#~~~~~~~~~~~Task E~~~~~~~~~~~~~
str(data)
#~~~~~~~~~~~Task G~~~~~~~~~~~~~
# Plotting age distribution by income level
ggplot(data, aes(x = age, fill = income.label)) +
geom_histogram(binwidth = 5, position = "dodge") +
labs(x = "Age", y = "Frequency", fill = "Income") +
ggtitle("Age Distribution by Income Level")
# Plotting workclass distribution
ggplot(data, aes(x = workclass, fill = income.label)) +
geom_bar(position = "stack") +
labs(x = "Workclass", y = "Count", fill = "Income") +
ggtitle("Distribution of Income by Workclass")
# Plotting hours worked per week and income level
ggplot(data, aes(x = working.hours, fill = income.label)) +
geom_density(alpha = 0.5) +
labs(x = "Hours per Week", y = "Density", fill = "Income") +
ggtitle("Density Plot of Hours Worked per Week by Income Level")
setwd("C:/Users/user/Desktop/R-Programming/Week2")
